pipeline {
    agent any
    environment {
        scannerHome = tool name: 'sonar-scanner'
        SONAR_TOKEN = credentials('SONAR_CLOUD_TOKEN')
    }
    stages {
        stage('Obtener codigo') {
            steps {
                git branch: 'main', poll: false, url: 'https://github.com/EnriqueTun23/1640-LOCAL-ORDER-ADMI.git'
            }
        }
        stage('Ejemplo de ejecucion en paralelo') {
            parallel {
                stage('Scanner cobol') {
                    steps {
                        withSonarQubeEnv('sonar-scanner') {
                            dir ('Codigo/Cobol') {
                                sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -X
                            """
                            }
                            
                        }
                    }
                }
                stage('Regresar ala carpeta principal') {
                    steps {
                        script {
                            dir('Codigo/C++') {
                                sh 'pwd'
                                sh 'chmod +x ./compile.sh'
                                sh 'ls -a'
                                sh '$BUILD_WRAPPER/build-wrapper-linux-x86-64 --out-dir bw-output ./compile.sh'
                                sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -X
                            """
                            }
                        }
                    }
                }
            }
            stage('Quality Gate') {
                steps {
                    script {
                        // Espera y obtiene el resultado de la Quality Gate de SonarCloud
                        timeout(time: 1, unit: 'HOURS') { // Ajusta el tiempo de espera según sea necesario
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline interrumpido debido a que la Quality Gate de SonarCloud falló: ${qg.status}"
                            }
                        }
                    }
                }
            }
        }
        stage('Post Parallel') {
            steps {
                echo "Se ejecuto parallel, y este es un mensaje sencillo"
            }
        }
    }
}
